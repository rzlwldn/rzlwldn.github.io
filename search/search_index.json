{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"cheat-sheet/python-install-package/","title":"Installing Packages","text":""},{"location":"cheat-sheet/python-install-package/#requirements-for-installing-packages","title":"Requirements for Installing Packages","text":"<p>This section describes the steps to follow before installing other Python packages.</p>"},{"location":"cheat-sheet/python-install-package/#ensure-you-can-run-python-from-the-command-line","title":"Ensure you can run Python from the command line","text":"<p>Before you go any further, make sure you have Python and that the expected version is available from your command line. You can check this by running:</p> <pre><code>python3 --version\n</code></pre> <p>Note</p> <p>Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the system Python without creating a virtual environment first should replace the <code>python</code> command in this tutorial with <code>python3</code> and the <code>python -m pip</code> command with <code>python3 -m pip --user</code>. Do not run any of the commands in this tutorial with <code>sudo</code>: if you get a permissions error, come back to the section on creating virtual environments, set one up, and then continue with the tutorial as written.</p>"},{"location":"cheat-sheet/python-install-package/#create-a-virtual-environment","title":"Create a virtual environment","text":"<pre><code>python3 -m venv tutorial_env\nsource tutorial_env/bin/activate\n</code></pre> <p>This will create a new virtual environment in the <code>tutorial_env</code> subdirectory, and configure the current shell to use it as the default <code>python</code> environment.</p> <p>Python \u201cVirtual Environments\u201d allow Python packages to be installed in an isolated location for a particular application, rather than being installed globally.</p> <p>Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python3.6/site-packages (or whatever your platform\u2019s standard location is), it\u2019s easy to end up in a situation where you unintentionally upgrade an application that shouldn\u2019t be upgraded.</p> <p>Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application.</p> <p>Also, what if you can\u2019t install packages into the global site-packages directory? For instance, on a shared host.</p> <p>In all these cases, virtual environments can help you. They have their own installation directories and they don\u2019t share libraries with other virtual environments.</p>"},{"location":"cheat-sheet/python-install-package/#use-pip-for-installing","title":"Use pip for Installing","text":"<p>pip is the recommended installer. Below, we\u2019ll cover the most common usage scenarios. For more detail, see the pip docs, which includes a complete Reference Guide.</p> <pre><code>pip install \"SomeProject\"\n</code></pre> <p>To install a specific version:</p> <pre><code>pip install \"SomeProject==1.4\"\n</code></pre> <p>To install a version that\u2019s compatible with a certain version:</p> <pre><code>pip install \"SomeProject~=1.4.2\"\n</code></pre> <p>In this case, this means to install any version \u201c==1.4.*\u201d version that\u2019s also \u201c&gt;=1.4.2\u201d.</p>"},{"location":"cheat-sheet/python-install-package/#upgrading-packages","title":"Upgrading packages","text":"<p>Upgrade an already installed <code>SomeProject</code> to the latest from PyPI.</p> <pre><code>pip install --upgrade SomeProject\n</code></pre>"},{"location":"cheat-sheet/python-install-package/#requirements-files","title":"Requirements files","text":"<p>Install a list of requirements specified in a Requirements File.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>To write installed package to Requirements file:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"cheat-sheet/python-packaging/","title":"Installing pip/setuptools/wheel with Linux Package Managers","text":""},{"location":"cheat-sheet/python-packaging/#fedora","title":"Fedora","text":"<pre><code>sudo dnf install python3-pip python3-wheel\n</code></pre> <p>To learn more about Python in Fedora, please visit the official Fedora docs, Python Classroom or Fedora Loves Python.</p>"},{"location":"cheat-sheet/python-packaging/#debianubuntu-and-derivatives","title":"Debian/Ubuntu and derivatives","text":"<p>Firstly, update and refresh repository lists by running this command:</p> <pre><code>sudo apt update\nsudo apt install python3-venv python3-pip\n</code></pre> <p>warning</p> <p>Recent Debian/Ubuntu versions have modified pip to use the \u201cUser Scheme\u201d by default, which is a significant behavior change that can be surprising to some users.</p>"},{"location":"cheat-sheet/python-packaging/#arch-linux","title":"Arch Linux","text":"<pre><code>sudo pacman -S python-pip\n</code></pre>"}]}