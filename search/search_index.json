{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Digital Garden of Code, Curiosity, and Continuous Learning","text":"<p>Dive into a curated space where the world of software engineering meets the spirit of lifelong learning. At my garden, you'll find a digital garden blooming with insights on work, exploration, and the endless journey of personal and professional growth.</p>"},{"location":"cheat-sheet/python-install-package/","title":"Installing Packages","text":""},{"location":"cheat-sheet/python-install-package/#requirements-for-installing-packages","title":"Requirements for Installing Packages","text":"<p>This section describes the steps to follow before installing other Python packages.</p>"},{"location":"cheat-sheet/python-install-package/#ensure-you-can-run-python-from-the-command-line","title":"Ensure you can run Python from the command line","text":"<p>Before you go any further, make sure you have Python and that the expected version is available from your command line. You can check this by running:</p> <pre><code>python3 --version\n</code></pre> <p>Note</p> <p>Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the system Python without creating a virtual environment first should replace the <code>python</code> command in this tutorial with <code>python3</code> and the <code>python -m pip</code> command with <code>python3 -m pip --user</code>. Do not run any of the commands in this tutorial with <code>sudo</code>: if you get a permissions error, come back to the section on creating virtual environments, set one up, and then continue with the tutorial as written.</p>"},{"location":"cheat-sheet/python-install-package/#create-a-virtual-environment","title":"Create a virtual environment","text":"<pre><code>python3 -m venv tutorial_env\nsource tutorial_env/bin/activate\n</code></pre> <p>This will create a new virtual environment in the <code>tutorial_env</code> subdirectory, and configure the current shell to use it as the default <code>python</code> environment.</p> <p>Python \u201cVirtual Environments\u201d allow Python packages to be installed in an isolated location for a particular application, rather than being installed globally.</p> <p>Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python3.6/site-packages (or whatever your platform\u2019s standard location is), it\u2019s easy to end up in a situation where you unintentionally upgrade an application that shouldn\u2019t be upgraded.</p> <p>Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application.</p> <p>Also, what if you can\u2019t install packages into the global site-packages directory? For instance, on a shared host.</p> <p>In all these cases, virtual environments can help you. They have their own installation directories and they don\u2019t share libraries with other virtual environments.</p>"},{"location":"cheat-sheet/python-install-package/#use-pip-for-installing","title":"Use pip for Installing","text":"<p>pip is the recommended installer. Below, we\u2019ll cover the most common usage scenarios. For more detail, see the pip docs, which includes a complete Reference Guide.</p> <pre><code>pip install \"SomeProject\"\n</code></pre> <p>To install a specific version:</p> <pre><code>pip install \"SomeProject==1.4\"\n</code></pre> <p>To install a version that\u2019s compatible with a certain version:</p> <pre><code>pip install \"SomeProject~=1.4.2\"\n</code></pre> <p>In this case, this means to install any version \u201c==1.4.*\u201d version that\u2019s also \u201c&gt;=1.4.2\u201d.</p>"},{"location":"cheat-sheet/python-install-package/#upgrading-packages","title":"Upgrading packages","text":"<p>Upgrade an already installed <code>SomeProject</code> to the latest from PyPI.</p> <pre><code>pip install --upgrade SomeProject\n</code></pre>"},{"location":"cheat-sheet/python-install-package/#requirements-files","title":"Requirements files","text":"<p>Install a list of requirements specified in a Requirements File.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>To write installed package to Requirements file:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"cheat-sheet/python-packaging/","title":"Installing pip/setuptools/wheel with Linux Package Managers","text":""},{"location":"cheat-sheet/python-packaging/#fedora","title":"Fedora","text":"<pre><code>sudo dnf install python3-pip python3-wheel\n</code></pre> <p>To learn more about Python in Fedora, please visit the official Fedora docs, Python Classroom or Fedora Loves Python.</p>"},{"location":"cheat-sheet/python-packaging/#debianubuntu-and-derivatives","title":"Debian/Ubuntu and derivatives","text":"<p>Firstly, update and refresh repository lists by running this command:</p> <pre><code>sudo apt update\nsudo apt install python3-venv python3-pip\n</code></pre> <p>warning</p> <p>Recent Debian/Ubuntu versions have modified pip to use the \u201cUser Scheme\u201d by default, which is a significant behavior change that can be surprising to some users.</p>"},{"location":"cheat-sheet/python-packaging/#arch-linux","title":"Arch Linux","text":"<pre><code>sudo pacman -S python-pip\n</code></pre>"},{"location":"cheat-sheet/docker/install/","title":"Install Docker Engine on Debian","text":""},{"location":"cheat-sheet/docker/install/#os-requirements","title":"OS requirements","text":"<p>To install Docker Engine, you need the 64-bit version of one of these Debian versions:</p> <pre><code>Debian Bookworm 12 (stable)\nDebian Bullseye 11 (oldstable)\n</code></pre> <p>Docker Engine for Debian is compatible with x86_64 (or amd64), armhf, arm64, and ppc64le (ppc64el) architectures.</p>"},{"location":"cheat-sheet/docker/install/#installation-methods","title":"Installation methods","text":"<p>You can install Docker Engine in different ways, depending on your needs:</p> <ul> <li> <p>Docker Engine comes bundled with Docker Desktop for Linux. This is the easiest and quickest way to get started.</p> </li> <li> <p>Set up and install Docker Engine from Docker's apt repository.</p> </li> <li> <p>Install it manually and manage upgrades manually.</p> </li> <li> <p>Use a convenience script. Only recommended for testing and development environments.</p> </li> </ul>"},{"location":"cheat-sheet/docker/install/#install-using-the-apt-repository","title":"Install using the apt repository","text":"<p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker <code>apt</code> repository. Afterward, you can install and update Docker from the repository.</p> <ol> <li>Set up Docker's <code>apt</code> repository.     <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n    \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\n    $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n    sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre></li> <li> <p>Install the Docker packages.     To install the latest version, run:</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> </li> </ol>"},{"location":"cheat-sheet/docker/install/#linux-post-installation-steps-for-docker-engine","title":"Linux post-installation steps for Docker Engine","text":"<p>These optional post-installation procedures describe how to configure your Linux host machine to work better with Docker.</p>"},{"location":"cheat-sheet/docker/install/#manage-docker-as-a-non-root-user","title":"Manage Docker as a non-root user","text":"<p>The Docker daemon binds to a Unix socket, not a TCP port. By default it's the <code>root</code> user that owns the Unix socket, and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the <code>root</code> user.</p> <p>If you don't want to preface the <code>docker</code> command with <code>sudo</code>, create a Unix group called <code>docker</code> and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the <code>docker</code> group. On some Linux distributions, the system automatically creates this group when installing Docker Engine using a package manager. In that case, there is no need for you to manually create the group.</p> <p>Warning</p> <p>The <code>docker</code> group grants root-level privileges to the user. For details on how this impacts security in your system, see Docker Daemon Attack Surface.</p> <p>To create the <code>docker</code> group and add your user:</p> <ol> <li> <p>Create the <code>docker</code> group.     <pre><code>sudo groupadd docker\n</code></pre></p> </li> <li> <p>Add your user to the docker group.     <pre><code>sudo usermod -aG docker $USER\n</code></pre></p> </li> <li> <p>Log out and log back in so that your group membership is re-evaluated.     You can also run the following command to activate the changes to groups:     <pre><code>newgrp docker\n</code></pre></p> </li> <li> <p>Verify that you can run docker commands without sudo.     <pre><code>docker run hello-world\n</code></pre></p> </li> </ol>"},{"location":"cheat-sheet/docker/install/#configure-docker-to-start-on-boot-with-systemd","title":"Configure Docker to start on boot with systemd","text":"<p>Many modern Linux distributions use systemd to manage which services start when the system boots. On Debian and Ubuntu, the Docker service starts on boot by default. To automatically start Docker and containerd on boot for other Linux distributions using systemd, run the following commands:</p> <pre><code>sudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n</code></pre> <p>To stop this behavior, use disable instead.</p> <pre><code>sudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n</code></pre>"},{"location":"cheat-sheet/docker/portainer/","title":"Install Portainer CE with Docker on Linux","text":""},{"location":"cheat-sheet/docker/portainer/#deployment","title":"Deployment","text":"<p>First, create the volume that Portainer Server will use to store its database:</p> <pre><code>docker volume create portainer_data\n</code></pre> <p>Then, download and install the Portainer Server container:</p> <pre><code>docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.21.0\n</code></pre> <p>Notes</p> <p>By default, Portainer generates and uses a self-signed SSL certificate to secure port 9443. Alternatively you can provide your own SSL certificate during installation or via the Portainer UI after installation is complete.</p> <p>If you require HTTP port <code>9000</code> open for legacy reasons, add the following to your <code>docker run</code> command: <code>-p 9000:9000</code></p> <p>Portainer Server has now been installed. You can check to see whether the Portainer Server container has started by running docker ps:</p> <pre><code>docker ps\n</code></pre>"},{"location":"cheat-sheet/llm/prompt-engineering-technique/","title":"Prompt engineering techniques","text":"<p>This guide based on Microsoft Prompt Engineering Techniques.</p>"},{"location":"cheat-sheet/llm/prompt-engineering-technique/#system-message","title":"System Message","text":"<p>The system message is included at the beginning of the prompt and is used to prime the model with context, instructions, or other information relevant to your use case. You can use the system message to describe the assistant\u2019s personality, define what the model should and shouldn\u2019t answer, and define the format of model responses.</p> <p>Example:</p> System Message User Assistant You're an AI assistant that helps people find information and responds in rhyme. If the user asks you a question you don't know the answer to, say so. What can you tell about me, John Doe? Dear John, I'm sorry to say, But I don't have info on you today. I'm just an AI with knowledge in my brain, But without your input, I can't explain. So please tell me more about what you seek, And I'll do my best to give you an answer unique. <p>Some other examples of system messages are:</p> <ul> <li>\u201cAssistant is a large language model trained by OpenAI.\u201d</li> <li>\u201cAssistant is an intelligent chatbot designed to help users answer technical questions about Azure OpenAI Service. Only answer questions using the context below and if you're not sure of an answer, you can say \"I don't know\".</li> <li>\u201cAssistant is an intelligent chatbot designed to help users answer their tax related questions.\u201d</li> <li>\u201cYou're an assistant designed to extract entities from text. Users will paste in a string of text and you'll respond with entities you've extracted from the text as a JSON object. Here's an example of your output format:</li> </ul> <pre><code>{  \n   \"name\": \"\",\n   \"company\": \"\",\n   \"phone_number\": \"\"\n}\n</code></pre> <p>An important detail to understand is that even if you instruct a model in the system message to answer I don't know when unsure of an answer this doesn't guarantee that the request will be honored. A well designed system message can increase the likelihood of a certain outcome, but it's still possible that an incorrect response could be generated that contradicts the intent of the instruction in the system message.</p>"},{"location":"cheat-sheet/llm/prompt-engineering-technique/#few-shot-learning","title":"Few-shot Learning","text":"<p>A common way to adapt language models to new tasks is to use few-shot learning. In few-shot learning, a set of training examples is provided as part of the prompt to give additional context to the model.</p> <p>When using the Chat Completions API, a series of messages between the User and Assistant (written in the new prompt format), can serve as examples for few-shot learning. These examples can be used to prime the model to respond in a certain way, emulate particular behaviors, and seed answers to common questions.</p> System Message Few-shoot Example Assistant is an intelligent chatbot designed to help users answer their tax related questions. Instructions - Only answer questions related to taxes. - If you're unsure of an answer, you can say \"I don't know\" or \"I'm not sure\" and recommend users go to the IRS website for more information. User - \"When do I need to file my taxes by?\" Assistant - \"In 2023, you'll need to file your taxes by April 18th. The date falls after the usual April 15th deadline because April 15th falls on a Saturday in 2023. For more details, see https://www.irs.gov/filing/individuals/when-to-file \"  User - \"How can I check the status of my tax refund?\" Assistant - \"You can check the status of your tax refund by visiting https://www.irs.gov/refunds \""},{"location":"cheat-sheet/llm/prompt-engineering-technique/#non-chat-scenario","title":"Non Chat Scenario","text":"<p>While the Chat Completion API is optimized to work with multi-turn conversations, it also can be used for non chat scenarios. For example, for a sentiment analysis scenario, you might use the following prompt:</p> System Message User Assistant You're an assistant designed to analyze sentiment from speech data. Users will paste in a string of text and you'll respond with an assessment of the response of the speaker. Rate on a scale of 1-10 (10 being highest). Explain why this rating was given. hi thank you for calling contoso pharmacy who am i speaking with today i understand your frustration mary um can you tell me what exactly you're trying to accomplish OK uh certainly happy to check that for you one moment please i see here that you were on a generic form of lipitor is that right OK uh so i see that your doctor stopped prescribing these drugs in twenty twenty one actually OK uh yeah i'd be happy to check that for you uh because sometimes there's a gap in the system and it just doesn't get reported so let me take a look here just a moment so i'm seeing here that your doctor had these drugs prescribed to you from twenty twelve through twenty twenty one OK um yeah according to the latest records uh provided by doctor's office you're now on a different drug metformin would you like us to go ahead and fill that prescription for you for pick up a bit of form in five hundred milligrams uh you're very welcome mary please let us know if there's anything else we can do for you today. Sentiment rating: 8 The speaker in this text seems to be polite, helpful, and patient while addressing the concerns of the customer. They take the time to check the information, provide clear explanations, and offer assistance. However, the rating isn't a 10 because there's still a hint of uncertainty in some parts of the conversation, which might not convey complete confidence to the customer."},{"location":"cheat-sheet/llm/prompt-engineering-technique/#repeat-instructions-at-the-end","title":"Repeat instructions at the end","text":"<p>Models can be susceptible to recency bias, which in this context means that information at the end of the prompt might have more significant influence over the output than information at the beginning of the prompt. Therefore, it's worth experimenting with repeating the instructions at the end of the prompt and evaluating the impact on the generated response.</p>"},{"location":"cheat-sheet/llm/prompt-engineering-technique/#add-clear-syntax","title":"Add clear syntax","text":"<p>Using clear syntax for your prompt\u2014including punctuation, headings, and section markers\u2014helps communicate intent and often makes outputs easier to parse.</p> <p>In the example below, separators (--- in this case) have been added between different sources of information or steps. This allows the use of --- as a stopping condition for generation. In addition, section headings or special variables are presented in uppercase to differentiate them.</p> System message User Assistant You're an AI assistant that helps people find information. You'll read a paragraph, and then issue queries to a search engine in order to fact-check it. Also explain the queries. --- PARAGRAPH John Smith is married to Lucy Smith. They have five kids, and he works as a software engineer at Microsoft. What search queries should I do to fact-check this? --- QUERIES 1. \"John Smith Microsoft\" - To check if John Smith is indeed employed at Microsoft.  2. \"John Smith Lucy Smith\" - To check if John Smith is married to Lucy Smith.  3. \"John Smith children\" - To check if John Smith has five children."},{"location":"cheat-sheet/llm/prompt-engineering-technique/#break-the-task-down","title":"Break the task down","text":"<p>Large language models (LLMs) often perform better if the task is broken down into smaller steps. For example, in the search query prompt referenced earlier, the prompt can be restructured so that the model is first instructed to extract relevant facts, and then instructed to generate search queries that can be used to verify those facts.</p> System Message User Assistant You're an AI assistant that helps people find information. You'll read a paragraph, and then issue queries to a search engine in order to fact-check it. --- PARAGRAPH  John Smith is married to Lucy Smith. They have five kids, and he works as a software engineer at Microsoft. What search queries should I do to fact-check this?  ---  Now you'll extract factual claims, and issue queries to fact-check them. When issuing a query, use the function SEARCH(\"query\")  FACTUAL CLAIMS 1. John Smith is married to Lucy Smith  2. They have five kids  3. He works as a software engineer at Microsoft QUERIES  SEARCH(\"John Smith married Lucy Smith\") SEARCH(\"John Smith family size\")  SEARCH(\"John Smith Microsoft software engineer\")"},{"location":"cheat-sheet/llm/prompt-engineering-technique/#temperature-and-top_p-parameters","title":"Temperature and Top_p parameters","text":"<p>Changing the temperature parameter changes the output of the model. The temperature parameter can be set between 0 and 2. A higher value, for example 0.7 makes the output more random and produce more divergent responses, while a lower value, like. 0.2, makes the output more focused and concrete. A fictional story could be generated using a higher temperature. Whereas to generate a legal document it's recommended to use a much lower temperature. Top_probability is another parameter and is similar to Temperature in that it also controls the randomness of the model response, but it does so in a different way. The general recommendation is to alter one of these two parameters at a time, not both.</p>"}]}